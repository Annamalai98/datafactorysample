{
	"name": "df_transform_hospital_admission",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryMatch"
				},
				{
					"dataset": {
						"referenceName": "ds_DimDate_lookup",
						"type": "DatasetReference"
					},
					"name": "dsDimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admissions_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkWeekly"
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admissions_daily",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				}
			],
			"transformations": [
				{
					"name": "selectRequiredROws"
				},
				{
					"name": "CountryLookup"
				},
				{
					"name": "selectReqrows2"
				},
				{
					"name": "SplitDailyfromWeekly"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggDimDate"
				},
				{
					"name": "joinwithDate"
				},
				{
					"name": "pivotWeekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectDaily2"
				},
				{
					"name": "selectWeekly3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissionSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryMatch",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dsDimDateSource",
				"HospitalAdmissionSource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredROws",
				"selectRequiredROws, CountryMatch lookup(selectRequiredROws@country == CountryMatch@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> CountryLookup",
				"CountryLookup select(mapColumn(",
				"          country = selectRequiredROws@country,",
				"          country_code_2_digit,",
				"          country = CountryMatch@country,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqrows2",
				"selectReqrows2 split(indicator=='Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> SplitDailyfromWeekly@(Weekly, Daily)",
				"dsDimDateSource derive(ecddc_Year_Week = year+'-W'+lpad(week_of_year, 2, '0')) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(ecddc_Year_Week),",
				"     {week-start-date} = min(date),",
				"          {week-end-date} = max(date)) ~> aggDimDate",
				"SplitDailyfromWeekly@Weekly, aggDimDate join(reported_year_week == ecddc_Year_Week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinwithDate",
				"joinwithDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          {week-start-date},",
				"          {week-end-date},",
				"          source),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotWeekly",
				"SplitDailyfromWeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_date,",
				"          population,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotDaily",
				"pivotWeekly sort(desc(reported_year_week, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> sortWeekly",
				"pivotDaily sort(desc(reported_date, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> sortDaily",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          hospital_occupancy_count = {Daily hospital occupancy_count},",
				"          ICU_occupancy_count = {Daily ICU occupancy_count},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDaily2",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          {reported_week-start-date} = {week-start-date},",
				"          {reported_week-end-date} = {week-end-date},",
				"          {new hospital occupancy count} = {Weekly new hospital admissions per 100k_count},",
				"          {new ICU occupancy count} = {Weekly new ICU admissions per 100k_count},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeekly3",
				"selectWeekly3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Hospital_Admissions_Weekly.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkWeekly",
				"selectDaily2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Hospital_Admissions_Daily.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkDaily"
			]
		}
	}
}